name: API Build

on:
  push:
    branches: ["**"]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # allow updating deploy workflow defaults
      packages: write
    env:
      REGISTRY_CANONICAL: ghcr.io/mconstant/pay2slay-api
      REGISTRY_STAGING: ghcr.io/mconstant/pay2slay-api-staging
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Derive Git SHA
        id: vars
        run: |
          GIT_SHA=$(git rev-parse HEAD)
          echo "git_sha=$GIT_SHA" >> $GITHUB_OUTPUT
          echo "short_sha=${GIT_SHA:0:12}" >> $GITHUB_OUTPUT
          echo "branch_ref=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT

      - name: Select Repository
        id: repo
        run: |
          # Treat both 'main' and 'master' as canonical (user default branch may be 'master')
          if [ "${{ steps.vars.outputs.branch_ref }}" = "main" ] || [ "${{ steps.vars.outputs.branch_ref }}" = "master" ]; then
            echo "repository=$REGISTRY_CANONICAL" >> $GITHUB_OUTPUT
          else
            echo "repository=$REGISTRY_STAGING" >> $GITHUB_OUTPUT
          fi

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Image (single-arch, no cache)
        run: |
          docker build --no-cache --platform linux/amd64 -t ${{ steps.repo.outputs.repository }}:${{ steps.vars.outputs.git_sha }} .
          docker tag ${{ steps.repo.outputs.repository }}:${{ steps.vars.outputs.git_sha }} ${{ steps.repo.outputs.repository }}:${{ steps.vars.outputs.short_sha }}

      - name: Capture Local Digest (pre-push)
        id: digest
        run: |
          DIGEST=$(docker image inspect ${{ steps.repo.outputs.repository }}:${{ steps.vars.outputs.git_sha }} --format '{{.Id}}')
          echo "pre_push_digest=$DIGEST" >> $GITHUB_OUTPUT

      - name: Push Images
        run: |
          docker push ${{ steps.repo.outputs.repository }}:${{ steps.vars.outputs.git_sha }}
          docker push ${{ steps.repo.outputs.repository }}:${{ steps.vars.outputs.short_sha }}

      - name: Install Project
        run: |
          pip install .

      - name: Emit Initial Metadata JSON
        id: meta_init
        run: |
          # Ensure local package import path so 'from src.lib...' works even before install editable
          export PYTHONPATH="$PYTHONPATH:$(pwd)"
          python scripts/ci/emit_image_metadata.py \
            --sha ${{ steps.vars.outputs.git_sha }} \
            --repository ${{ steps.repo.outputs.repository }} \
            --digest ${{ steps.digest.outputs.pre_push_digest }} > metadata.json
          # Add pre_push_digest explicitly (image_digest already present)
          python -c "import json; p='metadata.json'; d=json.load(open(p)); d['pre_push_digest']=d['image_digest']; json.dump(d, open(p,'w')); print()"

      - name: Soft Signature Verify (placeholder)
        id: sign
        run: |
          chmod +x scripts/ci/soft_verify.sh
          scripts/ci/soft_verify.sh --image ${{ steps.repo.outputs.repository }}:${{ steps.vars.outputs.git_sha }} --gha

      - name: Post-Push Digest Verification
        id: verify
        run: |
          python scripts/ci/check_digest_post_push.py metadata.json ${{ steps.repo.outputs.repository }} ${{ steps.vars.outputs.git_sha }}
          echo "metadata_path=metadata.json" >> $GITHUB_OUTPUT

      - name: Generate SBOM (Syft)
        run: |
          echo "Installing syft for SBOM generation" >&2
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin > /dev/null
          syft ${{ steps.repo.outputs.repository }}:${{ steps.vars.outputs.git_sha }} -o spdx-json=sbom.json
          python -c "import json; d=json.load(open('metadata.json')); d['sbom_ref']='sbom.json'; json.dump(d, open('metadata.json','w')); print('SBOM linked: sbom.json')"
          echo "sbom_status=generated" >> $GITHUB_OUTPUT

      - name: Upload SBOM Artifact
        uses: actions/upload-artifact@v4
        with:
          # Unique artifact name per build to avoid collisions and allow deterministic retrieval
          name: sbom-${{ steps.vars.outputs.git_sha }}
          path: sbom.json

      - name: Upload Metadata Artifact
        uses: actions/upload-artifact@v4
        with:
          # Unique artifact name keyed by immutable git SHA (40 hex)
          name: image-metadata-${{ steps.vars.outputs.git_sha }}
          path: metadata.json

      - name: Log Summary
        run: |
          sudo apt-get update -y >/dev/null 2>&1 || true
          sudo apt-get install -y jq >/dev/null 2>&1 || true
          echo "Built image ${{ steps.repo.outputs.repository }}:${{ steps.vars.outputs.git_sha }} pre_digest=${{ steps.digest.outputs.pre_push_digest }}" \
               "verification=$(jq -r .digest_verification metadata.json) post_digest=$(jq -r .post_push_digest metadata.json)" \
               "signature=${{ steps.sign.outputs.signature_status }}"

      # Restore auto-update of deploy workflow defaults now that workflows: write permission is granted
      - name: Update Deploy Workflow Defaults
        if: ${{ (github.ref_name == 'main' || github.ref_name == 'master') && ! contains(github.event.head_commit.message, '[skip-deploy-defaults]') }}
        run: |
          echo "Skipping deploy workflow default update (no workflow write permissions)."

      # Keep recording latest build info as a lightweight alternative consumer path
      - name: Record Latest Build Info
        if: ${{ (github.ref_name == 'main' || github.ref_name == 'master') }}
        run: |
          set -euo pipefail
          mkdir -p ci
          echo '{"image_sha":"${{ steps.vars.outputs.git_sha }}","build_run_id":"${{ github.run_id }}"}' > ci/latest_build.json
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          if git diff --quiet ci/latest_build.json; then
            echo "Latest build info unchanged"; exit 0; fi
          git add ci/latest_build.json
          git commit -m "chore(ci): record latest build ${{ steps.vars.outputs.git_sha }} [skip-ci]"
          git push

      - name: Update Rollback Options
        if: ${{ (github.ref_name == 'main' || github.ref_name == 'master') && ! contains(github.event.head_commit.message, '[skip-rollback-options]') }}
        run: |
          set -euo pipefail
          python scripts/ci/update_rollback_options.py \
            --file .github/workflows/api-rollback.yml \
            --sha ${{ steps.vars.outputs.git_sha }}
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          if git diff --quiet .github/workflows/api-rollback.yml; then
            echo "No changes to rollback workflow"; exit 0; fi
          git add .github/workflows/api-rollback.yml
            git commit -m "chore(ci): update rollback target list with ${{ steps.vars.outputs.git_sha }} [skip-rollback-options]" || echo "Commit skipped" ; git push || echo "Push skipped"
