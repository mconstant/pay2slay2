name: ci
on:
  push:
    branches: ["**"]
  pull_request:

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - name: Set up caching
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
      - name: Install
        run: |
          python -m pip install --upgrade pip
          python -m pip install -e '.[dev]'
      - name: Lint
        run: ruff check .
      - name: Typecheck
        run: mypy
      - name: Test
        run: PYTHONPATH=. pytest -q
      - name: SBOM (Syft)
        uses: anchore/sbom-action@v0
        with:
          artifact-name: sbom.spdx.json
          format: spdx-json
          upload-artifact: true
      - name: Upload SBOM summary
        run: |
          echo "SBOM generated (spdx-json). Will gate on critical vulns." >> $GITHUB_STEP_SUMMARY
      - name: Scan (Grype)
        uses: anchore/scan-action@v5
        with:
          fail-build: true
          severity-cutoff: critical
      - name: Vulnerability summary (non-blocking informational)
        if: always()
        run: |
          echo 'For detailed vulnerability report see action artifacts and the Grype step logs.' >> $GITHUB_STEP_SUMMARY
          echo 'Gating policy: build fails if any CRITICAL vulnerabilities are detected in direct or transitive dependencies.' >> $GITHUB_STEP_SUMMARY

  docs-validate:
    runs-on: ubuntu-latest
    name: Docs Validation
    steps:
      - uses: actions/checkout@v4
      - name: Validate Docs
        run: |
          chmod +x scripts/ci/validate_docs.sh
          scripts/ci/validate_docs.sh
