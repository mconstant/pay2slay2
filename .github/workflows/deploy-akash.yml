name: deploy-akash
on:
  workflow_dispatch:
    inputs:
      akash_network:
        description: 'Akash chain endpoint'
        required: true
        default: 'https://akash-rpc.polkachu.com:443'
      image_tag:
        description: 'Container image tag to build & deploy'
        required: true
        default: 'latest'
      ref:
        description: 'Git ref (branch or tag) to deploy (defaults to workflow run branch)'
        required: false
      akash_account_address:
        description: 'Akash wallet address (akash1...) if not set via repo variable'
        required: false

permissions:
  contents: read
  packages: write

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ github.event.inputs.image_tag }}
      IMAGE_REPO: ghcr.io/${{ github.repository }}
    steps:
      - uses: actions/checkout@v4
      - name: Log in to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Build and push image
        run: |
          docker build -t ${IMAGE_REPO}:${IMAGE_TAG} .
          docker push ${IMAGE_REPO}:${IMAGE_TAG}
      - name: Set outputs
        id: meta
        run: |
          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "image_repo=${IMAGE_REPO}" >> $GITHUB_OUTPUT
    outputs:
      image_tag: ${{ steps.meta.outputs.image_tag }}
      image_repo: ${{ steps.meta.outputs.image_repo }}

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    env:
      AKASH_CHAIN_ID: "akashnet-2"
      IMAGE_TAG: ${{ needs.build_and_push.outputs.image_tag }}
      IMAGE_REPO: ${{ needs.build_and_push.outputs.image_repo }}
  # Expect AKASH_ACCOUNT_ADDRESS to be provided as a repository variable. It will appear automatically at runtime.
    steps:
      - uses: actions/checkout@v4
      - name: Download Artifact
        uses: badgerhobbs/terraform-state@v2
        with:
            directory: ./infra/akash
            operation: download
            location: artifact
            github_token: ${{ env.GH_PAT }}
        continue-on-error: true
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
      - name: Install pass
        run: |
          sudo apt-get update > /dev/null
          sudo apt-get install -yqq pass
      - name: Setup Akash CLI
        uses: LumeWeb/akash-action@cfd98517684fe809a107442d56bb4e22e1cfa0a5
        with:
          wallet-name: deployer
          mnemonic: ${{ env.AKASH_MNEMONIC }}
          cert-content: ${{ env.CERT_CONTENT }}
          cert-id: ${{ vars.AKASH_CERT_ID }}
        env:
          AKASH_MNEMONIC: ${{ secrets.AKASH_MNEMONIC }}
          CERT_CONTENT: ${{ secrets.AKASH_CERT }}
      - name: Validate required repository variables
        run: |
          ADDRESS_SOURCE="env"
          if [ -z "${AKASH_ACCOUNT_ADDRESS}" ]; then
            if [ -n "${{ github.event.inputs.akash_account_address }}" ]; then
              export AKASH_ACCOUNT_ADDRESS='${{ github.event.inputs.akash_account_address }}'
              echo "AKASH_ACCOUNT_ADDRESS=${AKASH_ACCOUNT_ADDRESS}" >> $GITHUB_ENV
              ADDRESS_SOURCE="input"
            else
              echo "Akash account address not provided. Set repo variable AKASH_ACCOUNT_ADDRESS or provide workflow input akash_account_address." >&2
              exit 1
            fi
          else
            echo "AKASH_ACCOUNT_ADDRESS present from environment (repo variable)."
          fi
          echo "Resolved Akash account address (${ADDRESS_SOURCE}): ${AKASH_ACCOUNT_ADDRESS}"
      - name: Create Akash cert
        run: |
          provider-services tx cert generate client --from deployer --yes
          provider-services tx cert publish client --from deployer --yes
          # show contents of the .akash directory
          ls -la /home/runner/.akash
        env:
          CERT_CONTENT: ${{ secrets.AKASH_CERT }}
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Configure cloud credentials
        env:
          AKASH_MNEMONIC: ${{ secrets.AKASH_MNEMONIC }}
        run: |
          if [ -z "$AKASH_MNEMONIC" ]; then
            echo "Missing AKASH_MNEMONIC secret" >&2
            exit 1
          fi
      - name: Terraform init/plan/apply
        working-directory: infra/akash
        env:
          TF_VAR_akash_mnemonic: ${{ secrets.AKASH_MNEMONIC }}
          TF_VAR_image_tag: ${{ env.IMAGE_TAG }}
          TF_VAR_image_repo: ${{ env.IMAGE_REPO }}
          TF_VAR_akash_node: ${{ github.event.inputs.akash_network }}
          TF_VAR_akash_chain_id: ${{ env.AKASH_CHAIN_ID }}
        run: |
          if [ -z "${AKASH_ACCOUNT_ADDRESS}" ]; then
            echo "AKASH_ACCOUNT_ADDRESS not populated at runtime (should have been set earlier)." >&2
            exit 1
          fi
          export TF_VAR_akash_account_address="${AKASH_ACCOUNT_ADDRESS}"
          echo "Using TF_VAR_akash_account_address=${TF_VAR_akash_account_address}"
          terraform init -input=false
          terraform plan -input=false -out=tfplan
          terraform apply -input=false -auto-approve tfplan
          echo "Deployment ID: $(terraform output -raw deployment_id 2>/dev/null || echo 'unavailable')"
          echo "Image: $(terraform output -raw image 2>/dev/null || echo 'unavailable')"
          echo "Services (JSON): $(terraform output -json services 2>/dev/null | jq -c '.' || echo 'unavailable')"
      - name: Derive Banano RPC endpoint
        id: banano_rpc
        working-directory: infra/akash
        run: |
          echo "Deriving Banano RPC endpoint (internal port ${INTERNAL_PORT})..."
          services_json=$(terraform output -json services 2>/dev/null || echo '[]')
          endpoint=$(echo "$services_json" | jq -r --arg p "$INTERNAL_PORT" '.[] | select(.name=="banano") | .forwarded_ports[] | select(.port==($p|tonumber)) | "\(.host):\(.external_port)"' | grep -v '^:$' | head -n1 || true)
          echo "Banano RPC endpoint available: $endpoint"
      - name: Upload Artifact
        uses: badgerhobbs/terraform-state@v2
        with:
          directory: ./infra/akash
          operation: upload
          location: artifact
          github_token: ${{ env.GH_PAT }}
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
